package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"wacc_32/assembly"
	"wacc_32/visitor"
)

func getFilename(filename string) string {
	parts := strings.Split(filename, "/")
	fname := parts[len(parts)-1]
	return strings.Replace(fname, ".wacc", ".s", -1)
}

func main() {
	parsePtr := flag.Bool(
		"p",
		false,
		"Parse only. Check the input file for syntax errors and generate an AST.",
	)
	astPtr := flag.Bool("t", false, "View AST. Display AST generated by the parser.")
	semPtr := flag.Bool("s", false, "Semantic check. Check the input file for semantic errors.")
	exePtr := flag.Bool("x", false, "Assembly generation. Generate arm assembly")
	flag.Parse()

	var err error

	file := flag.Arg(0)

	var wp *visitor.WaccParser
	data, err := ioutil.ReadFile(file)
	if err != nil {
		panic(fmt.Sprintf("No file called %s found!!", file))
	}
	if *exePtr {
		os.Chdir(filepath.Dir(file))
	}

	/* ****************************** PARSING ****************************** */
	wp = visitor.NewWaccParser(string(data), "")
	parseTree := wp.GetParseTree()
	if *parsePtr {
		wp.PrintParseTree(parseTree)
	}

	wp.SyntaxCheck()

	if *parsePtr {
		return
	}

	/* ************************** AST GENERATION *************************** */
	ast := getAST(parseTree, wp)

	if *astPtr {
		printAST(ast)
		return
	}

	/* ************************* SEMANTIC ANALYSIS ************************* */
	semanticCheck(ast)
	if *semPtr {
		return
	}

	/* ************************** ASM GENERATION *************************** */
	v := assembly.NewArm11CodeGenerator()
	code := v.GenerateCode(ast)

	filename := getFilename(file)
	if *exePtr {
		filename = "input.s"
	}

	err = ioutil.WriteFile(filename, []byte(code), 0644)
	if err != nil {
		panic(err)
	}
}
